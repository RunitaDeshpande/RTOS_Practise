
frtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  20000010  080051b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049a4  080051b0  000249a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dd2  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d7  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000356e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  000363b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000282d  00000000  00000000  00036f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed76  00000000  00000000  0003978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb065  00000000  00000000  00048503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  001435bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080050f0 	.word	0x080050f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080050f0 	.word	0x080050f0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa03 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f826 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8fe 	bl	8000744 <MX_GPIO_Init>
  MX_RTC_Init();
 8000548:	f000 f8a0 	bl	800068c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f002 f82c 	bl	80025a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0x40>)
 8000552:	2100      	movs	r1, #0
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <main+0x44>)
 8000556:	f002 f891 	bl	800267c <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a08      	ldr	r2, [pc, #32]	; (8000580 <main+0x48>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0x4c>)
 8000562:	2100      	movs	r1, #0
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0x50>)
 8000566:	f002 f889 	bl	800267c <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <main+0x54>)
 800056e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000570:	f002 f84e 	bl	8002610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x3c>
 8000576:	bf00      	nop
 8000578:	08005138 	.word	0x08005138
 800057c:	080007a9 	.word	0x080007a9
 8000580:	20004934 	.word	0x20004934
 8000584:	0800515c 	.word	0x0800515c
 8000588:	080007d9 	.word	0x080007d9
 800058c:	20004938 	.word	0x20004938

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b0b8      	sub	sp, #224	; 0xe0
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800059a:	2234      	movs	r2, #52	; 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fd9e 	bl	80050e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2290      	movs	r2, #144	; 0x90
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fd8f 	bl	80050e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <SystemClock_Config+0xf4>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <SystemClock_Config+0xf4>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	; 0x40
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SystemClock_Config+0xf4>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005da:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0xf8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e2:	4a29      	ldr	r2, [pc, #164]	; (8000688 <SystemClock_Config+0xf8>)
 80005e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xf8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005f6:	230a      	movs	r3, #10
 80005f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2310      	movs	r3, #16
 8000604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fcdb 	bl	8000fd4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f8e8 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000646:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff6f 	bl	8001530 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000658:	f000 f8ce 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800065c:	2320      	movs	r3, #32
 800065e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f902 	bl	8001874 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000676:	f000 f8bf 	bl	80007f8 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	37e0      	adds	r7, #224	; 0xe0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
 80006a2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_RTC_Init+0xb0>)
 80006aa:	4a25      	ldr	r2, [pc, #148]	; (8000740 <MX_RTC_Init+0xb4>)
 80006ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_RTC_Init+0xb0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_RTC_Init+0xb0>)
 80006b6:	227f      	movs	r2, #127	; 0x7f
 80006b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_RTC_Init+0xb0>)
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_RTC_Init+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_RTC_Init+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_RTC_Init+0xb0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d2:	481a      	ldr	r0, [pc, #104]	; (800073c <MX_RTC_Init+0xb0>)
 80006d4:	f001 fcf6 	bl	80020c4 <HAL_RTC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80006de:	f000 f88b 	bl	80007f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80006e2:	2312      	movs	r3, #18
 80006e4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2201      	movs	r2, #1
 80006fc:	4619      	mov	r1, r3
 80006fe:	480f      	ldr	r0, [pc, #60]	; (800073c <MX_RTC_Init+0xb0>)
 8000700:	f001 fd72 	bl	80021e8 <HAL_RTC_SetTime>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800070a:	f000 f875 	bl	80007f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800070e:	2301      	movs	r3, #1
 8000710:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000712:	2301      	movs	r3, #1
 8000714:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000716:	2301      	movs	r3, #1
 8000718:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_RTC_Init+0xb0>)
 8000726:	f001 fe1d 	bl	8002364 <HAL_RTC_SetDate>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000730:	f000 f862 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20004940 	.word	0x20004940
 8000740:	40002800 	.word	0x40002800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x5c>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x5c>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_GPIO_Init+0x5c>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, gled_Pin|rled_Pin|bled_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f244 0181 	movw	r1, #16513	; 0x4081
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x60>)
 8000778:	f000 fbf8 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : gled_Pin rled_Pin bled_Pin */
  GPIO_InitStruct.Pin = gled_Pin|rled_Pin|bled_Pin;
 800077c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x60>)
 8000794:	f000 fa3e 	bl	8000c14 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400

080007a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 80007b0:	2101      	movs	r1, #1
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <StartDefaultTask+0x2c>)
 80007b4:	f000 fbf3 	bl	8000f9e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f000 f920 	bl	8000a00 <HAL_Delay>
	  HAL_GPIO_TogglePin(rled_GPIO_Port, rled_Pin);
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <StartDefaultTask+0x2c>)
 80007c6:	f000 fbea 	bl	8000f9e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ce:	f000 f917 	bl	8000a00 <HAL_Delay>
	  HAL_GPIO_TogglePin(gled_GPIO_Port, gled_Pin);
 80007d2:	e7ed      	b.n	80007b0 <StartDefaultTask+0x8>
 80007d4:	40020400 	.word	0x40020400

080007d8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	while(1)
	{
  HAL_GPIO_TogglePin(bled_GPIO_Port, bled_Pin);
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <StartTask02+0x1c>)
 80007e4:	f000 fbdb 	bl	8000f9e <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 80007e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ec:	f000 f908 	bl	8000a00 <HAL_Delay>
  HAL_GPIO_TogglePin(bled_GPIO_Port, bled_Pin);
 80007f0:	e7f6      	b.n	80007e0 <StartTask02+0x8>
 80007f2:	bf00      	nop
 80007f4:	40020400 	.word	0x40020400

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 f9be 	bl	8000bc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_RTC_MspInit+0x2c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d105      	bne.n	8000872 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <HAL_RTC_MspInit+0x30>)
 8000868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_RTC_MspInit+0x30>)
 800086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000870:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40002800 	.word	0x40002800
 8000884:	40023800 	.word	0x40023800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f882 	bl	80009c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008bc:	f003 fb7e 	bl	8003fbc <xTaskGetSchedulerState>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d001      	beq.n	80008ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008c6:	f004 f95f 	bl	8004b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000910:	4c0b      	ldr	r4, [pc, #44]	; (8000940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800091e:	f7ff ffd7 	bl	80008d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000922:	f004 fbab 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fe07 	bl	8000538 <main>
  bx  lr    
 800092a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000938:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 800093c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000940:	200049a4 	.word	0x200049a4

08000944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>

08000946 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f92e 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000950:	200f      	movs	r0, #15
 8000952:	f000 f805 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000956:	f7ff ff55 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	bd80      	pop	{r7, pc}

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f93b 	bl	8000bfa <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f911 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20004960 	.word	0x20004960

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20004960 	.word	0x20004960

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x40>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	05fa0000 	.word	0x05fa0000

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5c 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e175      	b.n	8000f20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8164 	bne.w	8000f1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x56>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80be 	beq.w	8000f1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a65      	ldr	r2, [pc, #404]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000db6:	4a61      	ldr	r2, [pc, #388]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d037      	beq.n	8000e52 <HAL_GPIO_Init+0x23e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a57      	ldr	r2, [pc, #348]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d031      	beq.n	8000e4e <HAL_GPIO_Init+0x23a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d02b      	beq.n	8000e4a <HAL_GPIO_Init+0x236>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a55      	ldr	r2, [pc, #340]	; (8000f4c <HAL_GPIO_Init+0x338>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d025      	beq.n	8000e46 <HAL_GPIO_Init+0x232>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <HAL_GPIO_Init+0x33c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01f      	beq.n	8000e42 <HAL_GPIO_Init+0x22e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <HAL_GPIO_Init+0x340>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x22a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_GPIO_Init+0x344>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_GPIO_Init+0x348>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a50      	ldr	r2, [pc, #320]	; (8000f60 <HAL_GPIO_Init+0x34c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	e012      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e2e:	230a      	movs	r3, #10
 8000e30:	e010      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00e      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e36:	2307      	movs	r3, #7
 8000e38:	e00c      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	e00a      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e3e:	2305      	movs	r3, #5
 8000e40:	e008      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e42:	2304      	movs	r3, #4
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e004      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e002      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <HAL_GPIO_Init+0x240>
 8000e52:	2300      	movs	r3, #0
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	f002 0203 	and.w	r2, r2, #3
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	4093      	lsls	r3, r2
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e64:	4935      	ldr	r1, [pc, #212]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e96:	4a34      	ldr	r2, [pc, #208]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_GPIO_Init+0x354>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	f67f ae86 	bls.w	8000c34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40021400 	.word	0x40021400
 8000f58:	40021800 	.word	0x40021800
 8000f5c:	40021c00 	.word	0x40021c00
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40022400 	.word	0x40022400
 8000f68:	40013c00 	.word	0x40013c00

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f88:	e003      	b.n	8000f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	041a      	lsls	r2, r3, #16
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e29b      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8087 	beq.w	8001106 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff8:	4b96      	ldr	r3, [pc, #600]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b04      	cmp	r3, #4
 8001002:	d00c      	beq.n	800101e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001004:	4b93      	ldr	r3, [pc, #588]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b08      	cmp	r3, #8
 800100e:	d112      	bne.n	8001036 <HAL_RCC_OscConfig+0x62>
 8001010:	4b90      	ldr	r3, [pc, #576]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101c:	d10b      	bne.n	8001036 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4b8d      	ldr	r3, [pc, #564]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d06c      	beq.n	8001104 <HAL_RCC_OscConfig+0x130>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d168      	bne.n	8001104 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e275      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103e:	d106      	bne.n	800104e <HAL_RCC_OscConfig+0x7a>
 8001040:	4b84      	ldr	r3, [pc, #528]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a83      	ldr	r2, [pc, #524]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0xd8>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x9c>
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a7e      	ldr	r2, [pc, #504]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b7c      	ldr	r3, [pc, #496]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7b      	ldr	r2, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e01d      	b.n	80010ac <HAL_RCC_OscConfig+0xd8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001078:	d10c      	bne.n	8001094 <HAL_RCC_OscConfig+0xc0>
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a75      	ldr	r2, [pc, #468]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b73      	ldr	r3, [pc, #460]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a72      	ldr	r2, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e00b      	b.n	80010ac <HAL_RCC_OscConfig+0xd8>
 8001094:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b6c      	ldr	r3, [pc, #432]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a6b      	ldr	r2, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b4:	f7ff fc98 	bl	80009e8 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fc94 	bl	80009e8 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e229      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0xe8>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc84 	bl	80009e8 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fc80 	bl	80009e8 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e215      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x110>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d069      	beq.n	80011e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001112:	4b50      	ldr	r3, [pc, #320]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b08      	cmp	r3, #8
 8001128:	d11c      	bne.n	8001164 <HAL_RCC_OscConfig+0x190>
 800112a:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <HAL_RCC_OscConfig+0x17a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d001      	beq.n	800114e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e1e9      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	493d      	ldr	r1, [pc, #244]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	e040      	b.n	80011e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fc36 	bl	80009e8 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff fc32 	bl	80009e8 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1c7      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4929      	ldr	r1, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
 80011b2:	e018      	b.n	80011e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc12 	bl	80009e8 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc0e 	bl	80009e8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1a3      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d038      	beq.n	8001264 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 80011fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001206:	f7ff fbef 	bl	80009e8 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120e:	f7ff fbeb 	bl	80009e8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e180      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x23a>
 800122c:	e01a      	b.n	8001264 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_RCC_OscConfig+0x280>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123a:	f7ff fbd5 	bl	80009e8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001242:	f7ff fbd1 	bl	80009e8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d903      	bls.n	8001258 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e166      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
 8001254:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800125a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a4 	beq.w	80013ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b8c      	ldr	r3, [pc, #560]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10d      	bne.n	800129a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b89      	ldr	r3, [pc, #548]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a88      	ldr	r2, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b86      	ldr	r3, [pc, #536]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129a:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <HAL_RCC_OscConfig+0x4d4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d118      	bne.n	80012d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012a6:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x4d4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb99 	bl	80009e8 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ba:	f7ff fb95 	bl	80009e8 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b64      	cmp	r3, #100	; 0x64
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e12a      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x4d4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <HAL_RCC_OscConfig+0x31a>
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
 80012ec:	e02d      	b.n	800134a <HAL_RCC_OscConfig+0x376>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x33c>
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a6a      	ldr	r2, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
 8001302:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a67      	ldr	r2, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	e01c      	b.n	800134a <HAL_RCC_OscConfig+0x376>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d10c      	bne.n	8001332 <HAL_RCC_OscConfig+0x35e>
 8001318:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	4a61      	ldr	r2, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6713      	str	r3, [r2, #112]	; 0x70
 8001324:	4b5f      	ldr	r3, [pc, #380]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a5e      	ldr	r2, [pc, #376]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	e00b      	b.n	800134a <HAL_RCC_OscConfig+0x376>
 8001332:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6713      	str	r3, [r2, #112]	; 0x70
 800133e:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d015      	beq.n	800137e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff fb49 	bl	80009e8 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fb45 	bl	80009e8 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0d8      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ee      	beq.n	800135a <HAL_RCC_OscConfig+0x386>
 800137c:	e014      	b.n	80013a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fb33 	bl	80009e8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001386:	f7ff fb2f 	bl	80009e8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f241 3288 	movw	r2, #5000	; 0x1388
 8001394:	4293      	cmp	r3, r2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e0c2      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a3c      	ldr	r2, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80013b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80ae 	beq.w	8001520 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d06d      	beq.n	80014ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d14b      	bne.n	8001470 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 80013de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb00 	bl	80009e8 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fafc 	bl	80009e8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e091      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69da      	ldr	r2, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	041b      	lsls	r3, r3, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	071b      	lsls	r3, r3, #28
 8001436:	491b      	ldr	r1, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff face 	bl	80009e8 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff faca 	bl	80009e8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e05f      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x47c>
 800146e:	e057      	b.n	8001520 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fab4 	bl	80009e8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fab0 	bl	80009e8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e045      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x4b0>
 80014a2:	e03d      	b.n	8001520 <HAL_RCC_OscConfig+0x54c>
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_RCC_OscConfig+0x558>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d030      	beq.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d129      	bne.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d122      	bne.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d119      	bne.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d10f      	bne.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0d0      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001548:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d910      	bls.n	8001578 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 020f 	bic.w	r2, r3, #15
 800155e:	4965      	ldr	r1, [pc, #404]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b8      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800159a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	494d      	ldr	r1, [pc, #308]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d040      	beq.n	8001654 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d115      	bne.n	8001612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e073      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e06b      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f023 0203 	bic.w	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4936      	ldr	r1, [pc, #216]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001624:	f7ff f9e0 	bl	80009e8 <HAL_GetTick>
 8001628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff f9dc 	bl	80009e8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e053      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 020c 	and.w	r2, r3, #12
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	429a      	cmp	r2, r3
 8001652:	d1eb      	bne.n	800162c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d210      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 020f 	bic.w	r2, r3, #15
 800166a:	4922      	ldr	r1, [pc, #136]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e032      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4916      	ldr	r1, [pc, #88]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	490e      	ldr	r1, [pc, #56]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c2:	f000 f821 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	490a      	ldr	r1, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1cc>)
 80016d4:	5ccb      	ldrb	r3, [r1, r3]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1d0>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1d4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f93c 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	08005180 	.word	0x08005180
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800170e:	2100      	movs	r1, #0
 8001710:	6079      	str	r1, [r7, #4]
 8001712:	2100      	movs	r1, #0
 8001714:	60f9      	str	r1, [r7, #12]
 8001716:	2100      	movs	r1, #0
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800171a:	2100      	movs	r1, #0
 800171c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171e:	4952      	ldr	r1, [pc, #328]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 8001720:	6889      	ldr	r1, [r1, #8]
 8001722:	f001 010c 	and.w	r1, r1, #12
 8001726:	2908      	cmp	r1, #8
 8001728:	d00d      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x3e>
 800172a:	2908      	cmp	r1, #8
 800172c:	f200 8094 	bhi.w	8001858 <HAL_RCC_GetSysClockFreq+0x150>
 8001730:	2900      	cmp	r1, #0
 8001732:	d002      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x32>
 8001734:	2904      	cmp	r1, #4
 8001736:	d003      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x38>
 8001738:	e08e      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_GetSysClockFreq+0x164>)
 800173c:	60bb      	str	r3, [r7, #8]
      break;
 800173e:	e08e      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_RCC_GetSysClockFreq+0x168>)
 8001742:	60bb      	str	r3, [r7, #8]
      break;
 8001744:	e08b      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001746:	4948      	ldr	r1, [pc, #288]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 8001748:	6849      	ldr	r1, [r1, #4]
 800174a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800174e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001750:	4945      	ldr	r1, [pc, #276]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 8001752:	6849      	ldr	r1, [r1, #4]
 8001754:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001758:	2900      	cmp	r1, #0
 800175a:	d024      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175c:	4942      	ldr	r1, [pc, #264]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 800175e:	6849      	ldr	r1, [r1, #4]
 8001760:	0989      	lsrs	r1, r1, #6
 8001762:	4608      	mov	r0, r1
 8001764:	f04f 0100 	mov.w	r1, #0
 8001768:	f240 14ff 	movw	r4, #511	; 0x1ff
 800176c:	f04f 0500 	mov.w	r5, #0
 8001770:	ea00 0204 	and.w	r2, r0, r4
 8001774:	ea01 0305 	and.w	r3, r1, r5
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <HAL_RCC_GetSysClockFreq+0x168>)
 800177a:	fb01 f003 	mul.w	r0, r1, r3
 800177e:	2100      	movs	r1, #0
 8001780:	fb01 f102 	mul.w	r1, r1, r2
 8001784:	1844      	adds	r4, r0, r1
 8001786:	493a      	ldr	r1, [pc, #232]	; (8001870 <HAL_RCC_GetSysClockFreq+0x168>)
 8001788:	fba2 0101 	umull	r0, r1, r2, r1
 800178c:	1863      	adds	r3, r4, r1
 800178e:	4619      	mov	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fd52 	bl	8000240 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e04a      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	099b      	lsrs	r3, r3, #6
 80017ac:	461a      	mov	r2, r3
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	ea02 0400 	and.w	r4, r2, r0
 80017be:	ea03 0501 	and.w	r5, r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	014b      	lsls	r3, r1, #5
 80017d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d4:	0142      	lsls	r2, r0, #5
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	1b00      	subs	r0, r0, r4
 80017dc:	eb61 0105 	sbc.w	r1, r1, r5
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	018b      	lsls	r3, r1, #6
 80017ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ee:	0182      	lsls	r2, r0, #6
 80017f0:	1a12      	subs	r2, r2, r0
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	00d9      	lsls	r1, r3, #3
 8001800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001804:	00d0      	lsls	r0, r2, #3
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	1912      	adds	r2, r2, r4
 800180c:	eb45 0303 	adc.w	r3, r5, r3
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0299      	lsls	r1, r3, #10
 800181a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800181e:	0290      	lsls	r0, r2, #10
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7fe fd06 	bl	8000240 <__aeabi_uldivmod>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4613      	mov	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_GetSysClockFreq+0x160>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	60bb      	str	r3, [r7, #8]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_RCC_GetSysClockFreq+0x164>)
 800185a:	60bb      	str	r3, [r7, #8]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	68bb      	ldr	r3, [r7, #8]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bdb0      	pop	{r4, r5, r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	00f42400 	.word	0x00f42400
 8001870:	017d7840 	.word	0x017d7840

08001874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d012      	beq.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800189c:	4b69      	ldr	r3, [pc, #420]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a68      	ldr	r2, [pc, #416]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018a6:	6093      	str	r3, [r2, #8]
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	4964      	ldr	r1, [pc, #400]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d017      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	4959      	ldr	r1, [pc, #356]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ec:	d101      	bne.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d017      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800190c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	494a      	ldr	r1, [pc, #296]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800191a:	4313      	orrs	r3, r2
 800191c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001928:	d101      	bne.n	800192e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 808b 	beq.w	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800195e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001962:	6413      	str	r3, [r2, #64]	; 0x40
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a34      	ldr	r2, [pc, #208]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800197c:	f7ff f834 	bl	80009e8 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7ff f830 	bl	80009e8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e38f      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d035      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d02e      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a1d      	ldr	r2, [pc, #116]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d114      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7fe fff8 	bl	80009e8 <HAL_GetTick>
 80019f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7fe fff4 	bl	80009e8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e351      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ee      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a2a:	d111      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	4901      	ldr	r1, [pc, #4]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	0ffffcff 	.word	0x0ffffcff
 8001a50:	4bb3      	ldr	r3, [pc, #716]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4ab2      	ldr	r2, [pc, #712]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a5a:	6093      	str	r3, [r2, #8]
 8001a5c:	4bb0      	ldr	r3, [pc, #704]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	49ad      	ldr	r1, [pc, #692]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d010      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a7a:	4ba9      	ldr	r3, [pc, #676]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a80:	4aa7      	ldr	r2, [pc, #668]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a8a:	4ba5      	ldr	r3, [pc, #660]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	49a2      	ldr	r1, [pc, #648]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00a      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aa8:	4b9d      	ldr	r3, [pc, #628]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ab6:	499a      	ldr	r1, [pc, #616]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001aca:	4b95      	ldr	r3, [pc, #596]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ad8:	4991      	ldr	r1, [pc, #580]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00a      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001aec:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001afa:	4989      	ldr	r1, [pc, #548]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00a      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001b0e:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4980      	ldr	r1, [pc, #512]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b30:	4b7b      	ldr	r3, [pc, #492]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4978      	ldr	r1, [pc, #480]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f023 020c 	bic.w	r2, r3, #12
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	496f      	ldr	r1, [pc, #444]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00a      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	4967      	ldr	r1, [pc, #412]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b96:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba4:	495e      	ldr	r1, [pc, #376]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00a      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	4956      	ldr	r1, [pc, #344]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00a      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00a      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	4945      	ldr	r1, [pc, #276]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001c1e:	4b40      	ldr	r3, [pc, #256]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	493c      	ldr	r1, [pc, #240]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d011      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c70:	492b      	ldr	r1, [pc, #172]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c80:	d101      	bne.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	491b      	ldr	r1, [pc, #108]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd4:	4912      	ldr	r1, [pc, #72]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf8:	4909      	ldr	r1, [pc, #36]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00f      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	e002      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	4986      	ldr	r1, [pc, #536]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d48:	497d      	ldr	r1, [pc, #500]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d006      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80d6 	beq.w	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d70:	f7fe fe3a 	bl	80009e8 <HAL_GetTick>
 8001d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d78:	f7fe fe36 	bl	80009e8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e195      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d021      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11d      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001daa:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001db8:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dbe:	0e1b      	lsrs	r3, r3, #24
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	019a      	lsls	r2, r3, #6
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	071b      	lsls	r3, r3, #28
 8001dde:	4958      	ldr	r1, [pc, #352]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d02e      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e10:	d129      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e12:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e26:	0f1b      	lsrs	r3, r3, #28
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	019a      	lsls	r2, r3, #6
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	061b      	lsls	r3, r3, #24
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	071b      	lsls	r3, r3, #28
 8001e46:	493e      	ldr	r1, [pc, #248]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e54:	f023 021f 	bic.w	r2, r3, #31
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4938      	ldr	r1, [pc, #224]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01d      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e78:	0e1b      	lsrs	r3, r3, #24
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e86:	0f1b      	lsrs	r3, r3, #28
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	019a      	lsls	r2, r3, #6
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	061b      	lsls	r3, r3, #24
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	071b      	lsls	r3, r3, #28
 8001ea6:	4926      	ldr	r1, [pc, #152]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d011      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	019a      	lsls	r2, r3, #6
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	071b      	lsls	r3, r3, #28
 8001ed6:	491a      	ldr	r1, [pc, #104]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a17      	ldr	r2, [pc, #92]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eea:	f7fe fd7d 	bl	80009e8 <HAL_GetTick>
 8001eee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ef2:	f7fe fd79 	bl	80009e8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0d8      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	f040 80ce 	bne.w	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe fd60 	bl	80009e8 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f2c:	f7fe fd5c 	bl	80009e8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d904      	bls.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0bb      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f50:	d0ec      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02e      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d12a      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f88:	4b4d      	ldr	r3, [pc, #308]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	0f1b      	lsrs	r3, r3, #28
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	019a      	lsls	r2, r3, #6
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	071b      	lsls	r3, r3, #28
 8001fae:	4944      	ldr	r1, [pc, #272]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fb6:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	493d      	ldr	r1, [pc, #244]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d022      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe4:	d11d      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fec:	0e1b      	lsrs	r3, r3, #24
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ff4:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	0f1b      	lsrs	r3, r3, #28
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	019a      	lsls	r2, r3, #6
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	431a      	orrs	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	431a      	orrs	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	071b      	lsls	r3, r3, #28
 800201a:	4929      	ldr	r1, [pc, #164]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d028      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	0e1b      	lsrs	r3, r3, #24
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	0c1b      	lsrs	r3, r3, #16
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	019a      	lsls	r2, r3, #6
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	071b      	lsls	r3, r3, #28
 8002062:	4917      	ldr	r1, [pc, #92]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800206c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002070:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	4911      	ldr	r1, [pc, #68]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208c:	f7fe fcac 	bl	80009e8 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002094:	f7fe fca8 	bl	80009e8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e007      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b2:	d1ef      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e081      	b.n	80021da <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7f5b      	ldrb	r3, [r3, #29]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fbb4 	bl	8000854 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	22ca      	movs	r2, #202	; 0xca
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2253      	movs	r2, #83	; 0x53
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f9fe 	bl	8002504 <RTC_EnterInitMode>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2204      	movs	r2, #4
 800211a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e05c      	b.n	80021da <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6899      	ldr	r1, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RTC_Init+0x120>)
 800212c:	400b      	ands	r3, r1
 800212e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	041a      	lsls	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f992 	bl	80024b4 <HAL_RTC_WaitForSynchro>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2204      	movs	r2, #4
 80021a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e018      	b.n	80021da <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	ff8fffbf 	.word	0xff8fffbf

080021e8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	7f1b      	ldrb	r3, [r3, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_RTC_SetTime+0x1c>
 8002200:	2302      	movs	r3, #2
 8002202:	e0a8      	b.n	8002356 <HAL_RTC_SetTime+0x16e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d126      	bne.n	8002264 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f994 	bl	800255c <RTC_ByteToBcd2>
 8002234:	4603      	mov	r3, r0
 8002236:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f98d 	bl	800255c <RTC_ByteToBcd2>
 8002242:	4603      	mov	r3, r0
 8002244:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002246:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f985 	bl	800255c <RTC_ByteToBcd2>
 8002252:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002254:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	7b1b      	ldrb	r3, [r3, #12]
 800225c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e018      	b.n	8002296 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002284:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800228a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	7b1b      	ldrb	r3, [r3, #12]
 8002290:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	22ca      	movs	r2, #202	; 0xca
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2253      	movs	r2, #83	; 0x53
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f92c 	bl	8002504 <RTC_EnterInitMode>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2204      	movs	r2, #4
 80022be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e045      	b.n	8002356 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_RTC_SetTime+0x178>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f8c9 	bl	80024b4 <HAL_RTC_WaitForSynchro>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2204      	movs	r2, #4
 8002334:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e00a      	b.n	8002356 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002354:	2300      	movs	r3, #0
  }
}
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop
 8002360:	007f7f7f 	.word	0x007f7f7f

08002364 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	7f1b      	ldrb	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_RTC_SetDate+0x1c>
 800237c:	2302      	movs	r3, #2
 800237e:	e092      	b.n	80024a6 <HAL_RTC_SetDate+0x142>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2202      	movs	r2, #2
 800238a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10e      	bne.n	80023b0 <HAL_RTC_SetDate+0x4c>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	f023 0310 	bic.w	r3, r3, #16
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	330a      	adds	r3, #10
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11c      	bne.n	80023f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f8ce 	bl	800255c <RTC_ByteToBcd2>
 80023c0:	4603      	mov	r3, r0
 80023c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	785b      	ldrb	r3, [r3, #1]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f8c7 	bl	800255c <RTC_ByteToBcd2>
 80023ce:	4603      	mov	r3, r0
 80023d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80023d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	789b      	ldrb	r3, [r3, #2]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f8bf 	bl	800255c <RTC_ByteToBcd2>
 80023de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80023e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80023ea:	4313      	orrs	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e00e      	b.n	800240e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	78db      	ldrb	r3, [r3, #3]
 80023f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80023fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8002402:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	22ca      	movs	r2, #202	; 0xca
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2253      	movs	r2, #83	; 0x53
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f870 	bl	8002504 <RTC_EnterInitMode>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	22ff      	movs	r2, #255	; 0xff
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2204      	movs	r2, #4
 8002436:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e031      	b.n	80024a6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	6979      	ldr	r1, [r7, #20]
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RTC_SetDate+0x14c>)
 800244a:	400b      	ands	r3, r1
 800244c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f821 	bl	80024b4 <HAL_RTC_WaitForSynchro>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2204      	movs	r2, #4
 8002484:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e00a      	b.n	80024a6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00ffff3f 	.word	0x00ffff3f

080024b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fa8a 	bl	80009e8 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024d6:	e009      	b.n	80024ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024d8:	f7fe fa86 	bl	80009e8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e6:	d901      	bls.n	80024ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e007      	b.n	80024fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ee      	beq.n	80024d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f04f 32ff 	mov.w	r2, #4294967295
 8002526:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fa5e 	bl	80009e8 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800252e:	e009      	b.n	8002544 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002530:	f7fe fa5a 	bl	80009e8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253e:	d901      	bls.n	8002544 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e007      	b.n	8002554 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ee      	beq.n	8002530 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800256a:	e005      	b.n	8002578 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	3b0a      	subs	r3, #10
 8002576:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	2b09      	cmp	r3, #9
 800257c:	d8f6      	bhi.n	800256c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	b2da      	uxtb	r2, r3
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4313      	orrs	r3, r2
 800258a:	b2db      	uxtb	r3, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ae:	f3ef 8305 	mrs	r3, IPSR
 80025b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80025b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ba:	f3ef 8310 	mrs	r3, PRIMASK
 80025be:	607b      	str	r3, [r7, #4]
  return(result);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c6:	f3ef 8311 	mrs	r3, BASEPRI
 80025ca:	603b      	str	r3, [r7, #0]
  return(result);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <osKernelInitialize+0x3a>
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <osKernelInitialize+0x64>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d103      	bne.n	80025e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80025da:	f06f 0305 	mvn.w	r3, #5
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e00c      	b.n	80025fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <osKernelInitialize+0x64>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <osKernelInitialize+0x64>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e002      	b.n	80025fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80025fc:	68fb      	ldr	r3, [r7, #12]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000002c 	.word	0x2000002c

08002610 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002616:	f3ef 8305 	mrs	r3, IPSR
 800261a:	60bb      	str	r3, [r7, #8]
  return(result);
 800261c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002622:	f3ef 8310 	mrs	r3, PRIMASK
 8002626:	607b      	str	r3, [r7, #4]
  return(result);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800262e:	f3ef 8311 	mrs	r3, BASEPRI
 8002632:	603b      	str	r3, [r7, #0]
  return(result);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <osKernelStart+0x3a>
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <osKernelStart+0x68>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002642:	f06f 0305 	mvn.w	r3, #5
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e010      	b.n	800266c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <osKernelStart+0x68>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d109      	bne.n	8002666 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002652:	f7ff ffa1 	bl	8002598 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <osKernelStart+0x68>)
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800265c:	f001 f850 	bl	8003700 <vTaskStartScheduler>
      stat = osOK;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e002      	b.n	800266c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800266c:	68fb      	ldr	r3, [r7, #12]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000002c 	.word	0x2000002c

0800267c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b090      	sub	sp, #64	; 0x40
 8002680:	af04      	add	r7, sp, #16
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268c:	f3ef 8305 	mrs	r3, IPSR
 8002690:	61fb      	str	r3, [r7, #28]
  return(result);
 8002692:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 808f 	bne.w	80027b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800269a:	f3ef 8310 	mrs	r3, PRIMASK
 800269e:	61bb      	str	r3, [r7, #24]
  return(result);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026a6:	f3ef 8311 	mrs	r3, BASEPRI
 80026aa:	617b      	str	r3, [r7, #20]
  return(result);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <osThreadNew+0x3e>
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <osThreadNew+0x148>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d07e      	beq.n	80027b8 <osThreadNew+0x13c>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d07b      	beq.n	80027b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80026c4:	2318      	movs	r3, #24
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d045      	beq.n	8002764 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <osThreadNew+0x6a>
        name = attr->name;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <osThreadNew+0x90>
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	2b38      	cmp	r3, #56	; 0x38
 80026fe:	d805      	bhi.n	800270c <osThreadNew+0x90>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <osThreadNew+0x94>
        return (NULL);
 800270c:	2300      	movs	r3, #0
 800270e:	e054      	b.n	80027ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <osThreadNew+0xca>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b5b      	cmp	r3, #91	; 0x5b
 800272e:	d90a      	bls.n	8002746 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <osThreadNew+0xca>
        mem = 1;
 8002740:	2301      	movs	r3, #1
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	e010      	b.n	8002768 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10c      	bne.n	8002768 <osThreadNew+0xec>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d108      	bne.n	8002768 <osThreadNew+0xec>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <osThreadNew+0xec>
          mem = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	e001      	b.n	8002768 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d110      	bne.n	8002790 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002776:	9202      	str	r2, [sp, #8]
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fe11 	bl	80033ac <xTaskCreateStatic>
 800278a:	4603      	mov	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e013      	b.n	80027b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d110      	bne.n	80027b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	b29a      	uxth	r2, r3
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fe62 	bl	8003472 <xTaskCreate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d001      	beq.n	80027b8 <osThreadNew+0x13c>
          hTask = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80027b8:	693b      	ldr	r3, [r7, #16]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3730      	adds	r7, #48	; 0x30
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000002c 	.word	0x2000002c

080027c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <vApplicationGetIdleTaskMemory+0x30>)
 80027de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000030 	.word	0x20000030
 80027f8:	2000008c 	.word	0x2000008c

080027fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a07      	ldr	r2, [pc, #28]	; (8002828 <vApplicationGetTimerTaskMemory+0x2c>)
 800280c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <vApplicationGetTimerTaskMemory+0x30>)
 8002812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	2000028c 	.word	0x2000028c
 800282c:	200002e8 	.word	0x200002e8

08002830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 0208 	add.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00c      	b.n	800290c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3308      	adds	r3, #8
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e002      	b.n	8002900 <vListInsert+0x2e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d2f6      	bcs.n	80028fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10c      	bne.n	80029c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	b672      	cpsid	i
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	b662      	cpsie	i
 80029c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80029c6:	f002 f849 	bl	8004a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	441a      	add	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	3b01      	subs	r3, #1
 80029f8:	68f9      	ldr	r1, [r7, #12]
 80029fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	441a      	add	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d114      	bne.n	8002a46 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01a      	beq.n	8002a5a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3310      	adds	r3, #16
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 f901 	bl	8003c30 <xTaskRemoveFromEventList>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <xQueueGenericReset+0xd0>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	e009      	b.n	8002a5a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fef0 	bl	8002830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3324      	adds	r3, #36	; 0x24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff feeb 	bl	8002830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a5a:	f002 f833 	bl	8004ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10c      	bne.n	8002a9a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	b672      	cpsid	i
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	b662      	cpsie	i
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	b672      	cpsid	i
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	b662      	cpsie	i
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <xQueueGenericCreateStatic+0x5a>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <xQueueGenericCreateStatic+0x5e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueGenericCreateStatic+0x60>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10c      	bne.n	8002aea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	b672      	cpsid	i
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	b662      	cpsie	i
 8002ae4:	623b      	str	r3, [r7, #32]
}
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <xQueueGenericCreateStatic+0x8a>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <xQueueGenericCreateStatic+0x8e>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <xQueueGenericCreateStatic+0x90>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	b672      	cpsid	i
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	b662      	cpsie	i
 8002b14:	61fb      	str	r3, [r7, #28]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b1a:	2350      	movs	r3, #80	; 0x50
 8002b1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d00c      	beq.n	8002b3e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	b672      	cpsid	i
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	b662      	cpsie	i
 8002b38:	61bb      	str	r3, [r7, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f805 	bl	8002b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3730      	adds	r7, #48	; 0x30
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e002      	b.n	8002b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	69b8      	ldr	r0, [r7, #24]
 8002ba2:	f7ff fef9 	bl	8002998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <xQueueGenericSend+0x36>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	b672      	cpsid	i
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	b662      	cpsie	i
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <xQueueGenericSend+0x44>
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <xQueueGenericSend+0x48>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <xQueueGenericSend+0x4a>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <xQueueGenericSend+0x68>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	b672      	cpsid	i
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	b662      	cpsie	i
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSend+0x76>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <xQueueGenericSend+0x7a>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <xQueueGenericSend+0x7c>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10c      	bne.n	8002c52 <xQueueGenericSend+0x9a>
	__asm volatile
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	b672      	cpsid	i
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	b662      	cpsie	i
 8002c4c:	623b      	str	r3, [r7, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c52:	f001 f9b3 	bl	8003fbc <xTaskGetSchedulerState>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <xQueueGenericSend+0xaa>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <xQueueGenericSend+0xae>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <xQueueGenericSend+0xb0>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10c      	bne.n	8002c86 <xQueueGenericSend+0xce>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	b672      	cpsid	i
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	b662      	cpsie	i
 8002c80:	61fb      	str	r3, [r7, #28]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c86:	f001 fee9 	bl	8004a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <xQueueGenericSend+0xe4>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d129      	bne.n	8002cf0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca2:	f000 fa15 	bl	80030d0 <prvCopyDataToQueue>
 8002ca6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d010      	beq.n	8002cd2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 ffbb 	bl	8003c30 <xTaskRemoveFromEventList>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002cc0:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <xQueueGenericSend+0x208>)
 8002cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	e00a      	b.n	8002ce8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cd8:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <xQueueGenericSend+0x208>)
 8002cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ce8:	f001 feec 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e063      	b.n	8002db8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cf6:	f001 fee5 	bl	8004ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e05c      	b.n	8002db8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fff7 	bl	8003cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d12:	f001 fed7 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d16:	f000 fd5d 	bl	80037d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d1a:	f001 fe9f 	bl	8004a5c <vPortEnterCritical>
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d103      	bne.n	8002d34 <xQueueGenericSend+0x17c>
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d3a:	b25b      	sxtb	r3, r3
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d103      	bne.n	8002d4a <xQueueGenericSend+0x192>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d4a:	f001 febb 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d4e:	1d3a      	adds	r2, r7, #4
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 ffe6 	bl	8003d28 <xTaskCheckForTimeOut>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d124      	bne.n	8002dac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d64:	f000 faac 	bl	80032c0 <prvIsQueueFull>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	3310      	adds	r3, #16
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ff06 	bl	8003b88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7e:	f000 fa37 	bl	80031f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d82:	f000 fd35 	bl	80037f0 <xTaskResumeAll>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f af7c 	bne.w	8002c86 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <xQueueGenericSend+0x208>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	e772      	b.n	8002c86 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da2:	f000 fa25 	bl	80031f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002da6:	f000 fd23 	bl	80037f0 <xTaskResumeAll>
 8002daa:	e76c      	b.n	8002c86 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dae:	f000 fa1f 	bl	80031f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002db2:	f000 fd1d 	bl	80037f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002db6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3738      	adds	r7, #56	; 0x38
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	; 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	b672      	cpsid	i
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	b662      	cpsie	i
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <xQueueGenericSendFromISR+0x40>
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <xQueueGenericSendFromISR+0x44>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <xQueueGenericSendFromISR+0x46>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	b672      	cpsid	i
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	b662      	cpsie	i
 8002e22:	623b      	str	r3, [r7, #32]
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d103      	bne.n	8002e36 <xQueueGenericSendFromISR+0x72>
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <xQueueGenericSendFromISR+0x76>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <xQueueGenericSendFromISR+0x78>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10c      	bne.n	8002e5a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	b672      	cpsid	i
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	b662      	cpsie	i
 8002e54:	61fb      	str	r3, [r7, #28]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e5a:	f001 fee7 	bl	8004c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	b672      	cpsid	i
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	b662      	cpsie	i
 8002e76:	61ba      	str	r2, [r7, #24]
 8002e78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <xQueueGenericSendFromISR+0xcc>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d12c      	bne.n	8002eea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea0:	f000 f916 	bl	80030d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ea4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d112      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	3324      	adds	r3, #36	; 0x24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 feb8 	bl	8003c30 <xTaskRemoveFromEventList>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e007      	b.n	8002ee4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	b25a      	sxtb	r2, r3
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002ee8:	e001      	b.n	8002eee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ef8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3738      	adds	r7, #56	; 0x38
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <xQueueReceive+0x34>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	b672      	cpsid	i
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	b662      	cpsie	i
 8002f32:	623b      	str	r3, [r7, #32]
}
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <xQueueReceive+0x42>
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueReceive+0x46>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueReceive+0x48>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10c      	bne.n	8002f6a <xQueueReceive+0x66>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	b672      	cpsid	i
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	b662      	cpsie	i
 8002f64:	61fb      	str	r3, [r7, #28]
}
 8002f66:	bf00      	nop
 8002f68:	e7fe      	b.n	8002f68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f6a:	f001 f827 	bl	8003fbc <xTaskGetSchedulerState>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <xQueueReceive+0x76>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <xQueueReceive+0x7a>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <xQueueReceive+0x7c>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10c      	bne.n	8002f9e <xQueueReceive+0x9a>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	b672      	cpsid	i
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	b662      	cpsie	i
 8002f98:	61bb      	str	r3, [r7, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f9e:	f001 fd5d 	bl	8004a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01f      	beq.n	8002fee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb2:	f000 f8f7 	bl	80031a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1e5a      	subs	r2, r3, #1
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	3310      	adds	r3, #16
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fe30 	bl	8003c30 <xTaskRemoveFromEventList>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <xQueueReceive+0x1c8>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fe6:	f001 fd6d 	bl	8004ac4 <vPortExitCritical>
				return pdPASS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e069      	b.n	80030c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ff4:	f001 fd66 	bl	8004ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e062      	b.n	80030c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003002:	f107 0310 	add.w	r3, r7, #16
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fe78 	bl	8003cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003010:	f001 fd58 	bl	8004ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003014:	f000 fbde 	bl	80037d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003018:	f001 fd20 	bl	8004a5c <vPortEnterCritical>
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003022:	b25b      	sxtb	r3, r3
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d103      	bne.n	8003032 <xQueueReceive+0x12e>
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003038:	b25b      	sxtb	r3, r3
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d103      	bne.n	8003048 <xQueueReceive+0x144>
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003048:	f001 fd3c 	bl	8004ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800304c:	1d3a      	adds	r2, r7, #4
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fe67 	bl	8003d28 <xTaskCheckForTimeOut>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d123      	bne.n	80030a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003062:	f000 f917 	bl	8003294 <prvIsQueueEmpty>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d017      	beq.n	800309c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	3324      	adds	r3, #36	; 0x24
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fd87 	bl	8003b88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800307a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307c:	f000 f8b8 	bl	80031f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003080:	f000 fbb6 	bl	80037f0 <xTaskResumeAll>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d189      	bne.n	8002f9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <xQueueReceive+0x1c8>)
 800308c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	e780      	b.n	8002f9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800309c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309e:	f000 f8a7 	bl	80031f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030a2:	f000 fba5 	bl	80037f0 <xTaskResumeAll>
 80030a6:	e77a      	b.n	8002f9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030aa:	f000 f8a1 	bl	80031f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ae:	f000 fb9f 	bl	80037f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b4:	f000 f8ee 	bl	8003294 <prvIsQueueEmpty>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f43f af6f 	beq.w	8002f9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3730      	adds	r7, #48	; 0x30
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000ed04 	.word	0xe000ed04

080030d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d14d      	bne.n	8003192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ff7c 	bl	8003ff8 <xTaskPriorityDisinherit>
 8003100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	e043      	b.n	8003192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d119      	bne.n	8003144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6858      	ldr	r0, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	461a      	mov	r2, r3
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	f001 ffd2 	bl	80050c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d32b      	bcc.n	8003192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e026      	b.n	8003192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68d8      	ldr	r0, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	461a      	mov	r2, r3
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	f001 ffb8 	bl	80050c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	425b      	negs	r3, r3
 800315e:	441a      	add	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	425b      	negs	r3, r3
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d105      	bne.n	8003192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3b01      	subs	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800319a:	697b      	ldr	r3, [r7, #20]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d303      	bcc.n	80031d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68d9      	ldr	r1, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	461a      	mov	r2, r3
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	f001 ff6e 	bl	80050c4 <memcpy>
	}
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031f8:	f001 fc30 	bl	8004a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003204:	e011      	b.n	800322a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fd0c 	bl	8003c30 <xTaskRemoveFromEventList>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800321e:	f000 fde9 	bl	8003df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	3b01      	subs	r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	dce9      	bgt.n	8003206 <prvUnlockQueue+0x16>
 8003232:	e000      	b.n	8003236 <prvUnlockQueue+0x46>
					break;
 8003234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800323e:	f001 fc41 	bl	8004ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003242:	f001 fc0b 	bl	8004a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800324e:	e011      	b.n	8003274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d012      	beq.n	800327e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3310      	adds	r3, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fce7 	bl	8003c30 <xTaskRemoveFromEventList>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003268:	f000 fdc4 	bl	8003df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800326c:	7bbb      	ldrb	r3, [r7, #14]
 800326e:	3b01      	subs	r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003278:	2b00      	cmp	r3, #0
 800327a:	dce9      	bgt.n	8003250 <prvUnlockQueue+0x60>
 800327c:	e000      	b.n	8003280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800327e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22ff      	movs	r2, #255	; 0xff
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003288:	f001 fc1c 	bl	8004ac4 <vPortExitCritical>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800329c:	f001 fbde 	bl	8004a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e001      	b.n	80032b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 fc07 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032c8:	f001 fbc8 	bl	8004a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d102      	bne.n	80032de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032d8:	2301      	movs	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e001      	b.n	80032e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032e2:	f001 fbef 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	e014      	b.n	800332a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003300:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <vQueueAddToRegistry+0x50>)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <vQueueAddToRegistry+0x50>)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <vQueueAddToRegistry+0x50>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003322:	e006      	b.n	8003332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b07      	cmp	r3, #7
 800332e:	d9e7      	bls.n	8003300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20004964 	.word	0x20004964

08003344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003354:	f001 fb82 	bl	8004a5c <vPortEnterCritical>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800335e:	b25b      	sxtb	r3, r3
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <vQueueWaitForMessageRestricted+0x2a>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <vQueueWaitForMessageRestricted+0x40>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003384:	f001 fb9e 	bl	8004ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fc1b 	bl	8003bd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff26 	bl	80031f0 <prvUnlockQueue>
	}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af04      	add	r7, sp, #16
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10c      	bne.n	80033da <xTaskCreateStatic+0x2e>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	b672      	cpsid	i
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	b662      	cpsie	i
 80033d4:	623b      	str	r3, [r7, #32]
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10c      	bne.n	80033fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	b672      	cpsid	i
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	b662      	cpsie	i
 80033f4:	61fb      	str	r3, [r7, #28]
}
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033fa:	235c      	movs	r3, #92	; 0x5c
 80033fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b5c      	cmp	r3, #92	; 0x5c
 8003402:	d00c      	beq.n	800341e <xTaskCreateStatic+0x72>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	b672      	cpsid	i
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	b662      	cpsie	i
 8003418:	61bb      	str	r3, [r7, #24]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800341e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <xTaskCreateStatic+0xb8>
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800343e:	2300      	movs	r3, #0
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f850 	bl	80034fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800345c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800345e:	f000 f8df 	bl	8003620 <prvAddNewTaskToReadyList>
 8003462:	e001      	b.n	8003468 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003468:	697b      	ldr	r3, [r7, #20]
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08c      	sub	sp, #48	; 0x30
 8003476:	af04      	add	r7, sp, #16
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fc14 	bl	8004cb4 <pvPortMalloc>
 800348c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00e      	beq.n	80034b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003494:	205c      	movs	r0, #92	; 0x5c
 8003496:	f001 fc0d 	bl	8004cb4 <pvPortMalloc>
 800349a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
 80034a8:	e005      	b.n	80034b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f001 fccc 	bl	8004e48 <vPortFree>
 80034b0:	e001      	b.n	80034b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d017      	beq.n	80034ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9303      	str	r3, [sp, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f80e 	bl	80034fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034e0:	69f8      	ldr	r0, [r7, #28]
 80034e2:	f000 f89d 	bl	8003620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e002      	b.n	80034f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034f2:	69bb      	ldr	r3, [r7, #24]
	}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	21a5      	movs	r1, #165	; 0xa5
 8003516:	f001 fde3 	bl	80050e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003524:	440b      	add	r3, r1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	b672      	cpsid	i
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	b662      	cpsie	i
 8003552:	617b      	str	r3, [r7, #20]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01f      	beq.n	800359e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e012      	b.n	800358a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	7819      	ldrb	r1, [r3, #0]
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	3334      	adds	r3, #52	; 0x34
 8003574:	460a      	mov	r2, r1
 8003576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d9e9      	bls.n	8003564 <prvInitialiseNewTask+0x68>
 8003590:	e000      	b.n	8003594 <prvInitialiseNewTask+0x98>
			{
				break;
 8003592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800359c:	e003      	b.n	80035a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2b37      	cmp	r3, #55	; 0x37
 80035aa:	d901      	bls.n	80035b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035ac:	2337      	movs	r3, #55	; 0x37
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	3304      	adds	r3, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff f952 	bl	8002870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	3318      	adds	r3, #24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff f94d 	bl	8002870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2200      	movs	r2, #0
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	69b8      	ldr	r0, [r7, #24]
 8003600:	f001 f91c 	bl	800483c <pxPortInitialiseStack>
 8003604:	4602      	mov	r2, r0
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003628:	f001 fa18 	bl	8004a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <prvAddNewTaskToReadyList+0xc4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <prvAddNewTaskToReadyList+0xc4>)
 8003634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <prvAddNewTaskToReadyList+0xc8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800363e:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <prvAddNewTaskToReadyList+0xc8>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <prvAddNewTaskToReadyList+0xc4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d110      	bne.n	800366e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800364c:	f000 fbf6 	bl	8003e3c <prvInitialiseTaskLists>
 8003650:	e00d      	b.n	800366e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <prvAddNewTaskToReadyList+0xcc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <prvAddNewTaskToReadyList+0xc8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	429a      	cmp	r2, r3
 8003666:	d802      	bhi.n	800366e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <prvAddNewTaskToReadyList+0xc8>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <prvAddNewTaskToReadyList+0xd0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <prvAddNewTaskToReadyList+0xd0>)
 8003676:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <prvAddNewTaskToReadyList+0xd0>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <prvAddNewTaskToReadyList+0xd4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d903      	bls.n	8003694 <prvAddNewTaskToReadyList+0x74>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <prvAddNewTaskToReadyList+0xd4>)
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <prvAddNewTaskToReadyList+0xd8>)
 80036a2:	441a      	add	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7ff f8ed 	bl	800288a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036b0:	f001 fa08 	bl	8004ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <prvAddNewTaskToReadyList+0xcc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <prvAddNewTaskToReadyList+0xc8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d207      	bcs.n	80036da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <prvAddNewTaskToReadyList+0xdc>)
 80036cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000bbc 	.word	0x20000bbc
 80036e8:	200006e8 	.word	0x200006e8
 80036ec:	20000bc8 	.word	0x20000bc8
 80036f0:	20000bd8 	.word	0x20000bd8
 80036f4:	20000bc4 	.word	0x20000bc4
 80036f8:	200006ec 	.word	0x200006ec
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800370e:	463a      	mov	r2, r7
 8003710:	1d39      	adds	r1, r7, #4
 8003712:	f107 0308 	add.w	r3, r7, #8
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff f856 	bl	80027c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	9202      	str	r2, [sp, #8]
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	460a      	mov	r2, r1
 800372e:	4923      	ldr	r1, [pc, #140]	; (80037bc <vTaskStartScheduler+0xbc>)
 8003730:	4823      	ldr	r0, [pc, #140]	; (80037c0 <vTaskStartScheduler+0xc0>)
 8003732:	f7ff fe3b 	bl	80033ac <xTaskCreateStatic>
 8003736:	4603      	mov	r3, r0
 8003738:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <vTaskStartScheduler+0xc4>)
 800373a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <vTaskStartScheduler+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003744:	2301      	movs	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e001      	b.n	800374e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d102      	bne.n	800375a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003754:	f000 fd16 	bl	8004184 <xTimerCreateTimerTask>
 8003758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d118      	bne.n	8003792 <vTaskStartScheduler+0x92>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	b672      	cpsid	i
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	b662      	cpsie	i
 8003774:	613b      	str	r3, [r7, #16]
}
 8003776:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <vTaskStartScheduler+0xc8>)
 800377a:	f04f 32ff 	mov.w	r2, #4294967295
 800377e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <vTaskStartScheduler+0xcc>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <vTaskStartScheduler+0xd0>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800378c:	f001 f8e8 	bl	8004960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003790:	e010      	b.n	80037b4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d10c      	bne.n	80037b4 <vTaskStartScheduler+0xb4>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	b672      	cpsid	i
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	b662      	cpsie	i
 80037ae:	60fb      	str	r3, [r7, #12]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <vTaskStartScheduler+0xb2>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08005120 	.word	0x08005120
 80037c0:	08003e0d 	.word	0x08003e0d
 80037c4:	20000be0 	.word	0x20000be0
 80037c8:	20000bdc 	.word	0x20000bdc
 80037cc:	20000bc8 	.word	0x20000bc8
 80037d0:	20000bc0 	.word	0x20000bc0

080037d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <vTaskSuspendAll+0x18>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a03      	ldr	r2, [pc, #12]	; (80037ec <vTaskSuspendAll+0x18>)
 80037e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000be4 	.word	0x20000be4

080037f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <xTaskResumeAll+0x11c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <xTaskResumeAll+0x30>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	b672      	cpsid	i
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	b662      	cpsie	i
 800381a:	603b      	str	r3, [r7, #0]
}
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003820:	f001 f91c 	bl	8004a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003824:	4b39      	ldr	r3, [pc, #228]	; (800390c <xTaskResumeAll+0x11c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3b01      	subs	r3, #1
 800382a:	4a38      	ldr	r2, [pc, #224]	; (800390c <xTaskResumeAll+0x11c>)
 800382c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <xTaskResumeAll+0x11c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d162      	bne.n	80038fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <xTaskResumeAll+0x120>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d05e      	beq.n	80038fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383e:	e02f      	b.n	80038a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003840:	4b34      	ldr	r3, [pc, #208]	; (8003914 <xTaskResumeAll+0x124>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3318      	adds	r3, #24
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f879 	bl	8002944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3304      	adds	r3, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f874 	bl	8002944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <xTaskResumeAll+0x128>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d903      	bls.n	8003870 <xTaskResumeAll+0x80>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <xTaskResumeAll+0x128>)
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <xTaskResumeAll+0x12c>)
 800387e:	441a      	add	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fe ffff 	bl	800288a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <xTaskResumeAll+0x130>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <xTaskResumeAll+0x134>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <xTaskResumeAll+0x124>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1cb      	bne.n	8003840 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038ae:	f000 fb65 	bl	8003f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <xTaskResumeAll+0x138>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038be:	f000 f847 	bl	8003950 <xTaskIncrementTick>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <xTaskResumeAll+0x134>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f1      	bne.n	80038be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <xTaskResumeAll+0x138>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <xTaskResumeAll+0x134>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <xTaskResumeAll+0x13c>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038fc:	f001 f8e2 	bl	8004ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8003900:	68bb      	ldr	r3, [r7, #8]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000be4 	.word	0x20000be4
 8003910:	20000bbc 	.word	0x20000bbc
 8003914:	20000b7c 	.word	0x20000b7c
 8003918:	20000bc4 	.word	0x20000bc4
 800391c:	200006ec 	.word	0x200006ec
 8003920:	200006e8 	.word	0x200006e8
 8003924:	20000bd0 	.word	0x20000bd0
 8003928:	20000bcc 	.word	0x20000bcc
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <xTaskGetTickCount+0x1c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800393c:	687b      	ldr	r3, [r7, #4]
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000bc0 	.word	0x20000bc0

08003950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800395a:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <xTaskIncrementTick+0x14c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 808b 	bne.w	8003a7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003964:	4b4e      	ldr	r3, [pc, #312]	; (8003aa0 <xTaskIncrementTick+0x150>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800396c:	4a4c      	ldr	r2, [pc, #304]	; (8003aa0 <xTaskIncrementTick+0x150>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d122      	bne.n	80039be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003978:	4b4a      	ldr	r3, [pc, #296]	; (8003aa4 <xTaskIncrementTick+0x154>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00c      	beq.n	800399c <xTaskIncrementTick+0x4c>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	b672      	cpsid	i
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	b662      	cpsie	i
 8003996:	603b      	str	r3, [r7, #0]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <xTaskIncrementTick+0x4a>
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <xTaskIncrementTick+0x154>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <xTaskIncrementTick+0x158>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <xTaskIncrementTick+0x154>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4a3f      	ldr	r2, [pc, #252]	; (8003aa8 <xTaskIncrementTick+0x158>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <xTaskIncrementTick+0x15c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <xTaskIncrementTick+0x15c>)
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	f000 fadf 	bl	8003f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <xTaskIncrementTick+0x160>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d349      	bcc.n	8003a5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c8:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <xTaskIncrementTick+0x154>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <xTaskIncrementTick+0x160>)
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	601a      	str	r2, [r3, #0]
					break;
 80039da:	e03f      	b.n	8003a5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039dc:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xTaskIncrementTick+0x154>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d203      	bcs.n	80039fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039f4:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <xTaskIncrementTick+0x160>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039fa:	e02f      	b.n	8003a5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe ff9f 	bl	8002944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ff96 	bl	8002944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <xTaskIncrementTick+0x164>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d903      	bls.n	8003a2c <xTaskIncrementTick+0xdc>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <xTaskIncrementTick+0x164>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <xTaskIncrementTick+0x168>)
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fe ff21 	bl	800288a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <xTaskIncrementTick+0x16c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d3b8      	bcc.n	80039c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a5a:	e7b5      	b.n	80039c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <xTaskIncrementTick+0x16c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	4915      	ldr	r1, [pc, #84]	; (8003ab8 <xTaskIncrementTick+0x168>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d907      	bls.n	8003a84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e004      	b.n	8003a84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <xTaskIncrementTick+0x170>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <xTaskIncrementTick+0x170>)
 8003a82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <xTaskIncrementTick+0x174>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000be4 	.word	0x20000be4
 8003aa0:	20000bc0 	.word	0x20000bc0
 8003aa4:	20000b74 	.word	0x20000b74
 8003aa8:	20000b78 	.word	0x20000b78
 8003aac:	20000bd4 	.word	0x20000bd4
 8003ab0:	20000bdc 	.word	0x20000bdc
 8003ab4:	20000bc4 	.word	0x20000bc4
 8003ab8:	200006ec 	.word	0x200006ec
 8003abc:	200006e8 	.word	0x200006e8
 8003ac0:	20000bcc 	.word	0x20000bcc
 8003ac4:	20000bd0 	.word	0x20000bd0

08003ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <vTaskSwitchContext+0xac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003adc:	e043      	b.n	8003b66 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <vTaskSwitchContext+0xb4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e012      	b.n	8003b12 <vTaskSwitchContext+0x4a>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <vTaskSwitchContext+0x44>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	b672      	cpsid	i
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	b662      	cpsie	i
 8003b06:	607b      	str	r3, [r7, #4]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <vTaskSwitchContext+0x42>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	491b      	ldr	r1, [pc, #108]	; (8003b80 <vTaskSwitchContext+0xb8>)
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0e2      	beq.n	8003aec <vTaskSwitchContext+0x24>
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <vTaskSwitchContext+0xb8>)
 8003b32:	4413      	add	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3308      	adds	r3, #8
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d104      	bne.n	8003b56 <vTaskSwitchContext+0x8e>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <vTaskSwitchContext+0xbc>)
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <vTaskSwitchContext+0xb4>)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6013      	str	r3, [r2, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000be4 	.word	0x20000be4
 8003b78:	20000bd0 	.word	0x20000bd0
 8003b7c:	20000bc4 	.word	0x20000bc4
 8003b80:	200006ec 	.word	0x200006ec
 8003b84:	200006e8 	.word	0x200006e8

08003b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	b672      	cpsid	i
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	b662      	cpsie	i
 8003bac:	60fb      	str	r3, [r7, #12]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <vTaskPlaceOnEventList+0x48>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3318      	adds	r3, #24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe fe89 	bl	80028d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	6838      	ldr	r0, [r7, #0]
 8003bc4:	f000 fa8a 	bl	80040dc <prvAddCurrentTaskToDelayedList>
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200006e8 	.word	0x200006e8

08003bd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10c      	bne.n	8003c00 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	b672      	cpsid	i
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	b662      	cpsie	i
 8003bfa:	617b      	str	r3, [r7, #20]
}
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <vTaskPlaceOnEventListRestricted+0x58>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3318      	adds	r3, #24
 8003c06:	4619      	mov	r1, r3
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7fe fe3e 	bl	800288a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f000 fa5d 	bl	80040dc <prvAddCurrentTaskToDelayedList>
	}
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200006e8 	.word	0x200006e8

08003c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	b672      	cpsid	i
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	b662      	cpsie	i
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	3318      	adds	r3, #24
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe fe6d 	bl	8002944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <xTaskRemoveFromEventList+0xb4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fe64 	bl	8002944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <xTaskRemoveFromEventList+0xb8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d903      	bls.n	8003c90 <xTaskRemoveFromEventList+0x60>
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <xTaskRemoveFromEventList+0xb8>)
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <xTaskRemoveFromEventList+0xbc>)
 8003c9e:	441a      	add	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fe fdef 	bl	800288a <vListInsertEnd>
 8003cac:	e005      	b.n	8003cba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3318      	adds	r3, #24
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <xTaskRemoveFromEventList+0xc0>)
 8003cb6:	f7fe fde8 	bl	800288a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <xTaskRemoveFromEventList+0xc4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d905      	bls.n	8003cd4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <xTaskRemoveFromEventList+0xc8>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e001      	b.n	8003cd8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003cd8:	697b      	ldr	r3, [r7, #20]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000be4 	.word	0x20000be4
 8003ce8:	20000bc4 	.word	0x20000bc4
 8003cec:	200006ec 	.word	0x200006ec
 8003cf0:	20000b7c 	.word	0x20000b7c
 8003cf4:	200006e8 	.word	0x200006e8
 8003cf8:	20000bd0 	.word	0x20000bd0

08003cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <vTaskInternalSetTimeOutState+0x24>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <vTaskInternalSetTimeOutState+0x28>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000bd4 	.word	0x20000bd4
 8003d24:	20000bc0 	.word	0x20000bc0

08003d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10c      	bne.n	8003d52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	b672      	cpsid	i
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	b662      	cpsie	i
 8003d4c:	613b      	str	r3, [r7, #16]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10c      	bne.n	8003d72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	b672      	cpsid	i
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	b662      	cpsie	i
 8003d6c:	60fb      	str	r3, [r7, #12]
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8003d72:	f000 fe73 	bl	8004a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <xTaskCheckForTimeOut+0xc4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d102      	bne.n	8003d96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e023      	b.n	8003dde <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <xTaskCheckForTimeOut+0xc8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d007      	beq.n	8003db2 <xTaskCheckForTimeOut+0x8a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e015      	b.n	8003dde <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d20b      	bcs.n	8003dd4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff97 	bl	8003cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	e004      	b.n	8003dde <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dde:	f000 fe71 	bl	8004ac4 <vPortExitCritical>

	return xReturn;
 8003de2:	69fb      	ldr	r3, [r7, #28]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000bc0 	.word	0x20000bc0
 8003df0:	20000bd4 	.word	0x20000bd4

08003df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <vTaskMissedYield+0x14>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000bd0 	.word	0x20000bd0

08003e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e14:	f000 f852 	bl	8003ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <prvIdleTask+0x28>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d9f9      	bls.n	8003e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <prvIdleTask+0x2c>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e30:	e7f0      	b.n	8003e14 <prvIdleTask+0x8>
 8003e32:	bf00      	nop
 8003e34:	200006ec 	.word	0x200006ec
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	e00c      	b.n	8003e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <prvInitialiseTaskLists+0x60>)
 8003e54:	4413      	add	r3, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fcea 	bl	8002830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b37      	cmp	r3, #55	; 0x37
 8003e66:	d9ef      	bls.n	8003e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e68:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <prvInitialiseTaskLists+0x64>)
 8003e6a:	f7fe fce1 	bl	8002830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e6e:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <prvInitialiseTaskLists+0x68>)
 8003e70:	f7fe fcde 	bl	8002830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e74:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <prvInitialiseTaskLists+0x6c>)
 8003e76:	f7fe fcdb 	bl	8002830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e7a:	480c      	ldr	r0, [pc, #48]	; (8003eac <prvInitialiseTaskLists+0x70>)
 8003e7c:	f7fe fcd8 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e80:	480b      	ldr	r0, [pc, #44]	; (8003eb0 <prvInitialiseTaskLists+0x74>)
 8003e82:	f7fe fcd5 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <prvInitialiseTaskLists+0x78>)
 8003e88:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <prvInitialiseTaskLists+0x64>)
 8003e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <prvInitialiseTaskLists+0x7c>)
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <prvInitialiseTaskLists+0x68>)
 8003e90:	601a      	str	r2, [r3, #0]
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200006ec 	.word	0x200006ec
 8003ea0:	20000b4c 	.word	0x20000b4c
 8003ea4:	20000b60 	.word	0x20000b60
 8003ea8:	20000b7c 	.word	0x20000b7c
 8003eac:	20000b90 	.word	0x20000b90
 8003eb0:	20000ba8 	.word	0x20000ba8
 8003eb4:	20000b74 	.word	0x20000b74
 8003eb8:	20000b78 	.word	0x20000b78

08003ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec2:	e019      	b.n	8003ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec4:	f000 fdca 	bl	8004a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <prvCheckTasksWaitingTermination+0x50>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fd35 	bl	8002944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <prvCheckTasksWaitingTermination+0x54>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <prvCheckTasksWaitingTermination+0x54>)
 8003ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <prvCheckTasksWaitingTermination+0x58>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <prvCheckTasksWaitingTermination+0x58>)
 8003eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003eee:	f000 fde9 	bl	8004ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f810 	bl	8003f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <prvCheckTasksWaitingTermination+0x58>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e1      	bne.n	8003ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000b90 	.word	0x20000b90
 8003f10:	20000bbc 	.word	0x20000bbc
 8003f14:	20000ba4 	.word	0x20000ba4

08003f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 ff8a 	bl	8004e48 <vPortFree>
				vPortFree( pxTCB );
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 ff87 	bl	8004e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f3a:	e01a      	b.n	8003f72 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d103      	bne.n	8003f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 ff7e 	bl	8004e48 <vPortFree>
	}
 8003f4c:	e011      	b.n	8003f72 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d00c      	beq.n	8003f72 <prvDeleteTCB+0x5a>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	b672      	cpsid	i
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	b662      	cpsie	i
 8003f6c:	60fb      	str	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <prvDeleteTCB+0x58>
	}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvResetNextTaskUnblockTime+0x38>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f94:	e008      	b.n	8003fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <prvResetNextTaskUnblockTime+0x38>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20000b74 	.word	0x20000b74
 8003fb8:	20000bdc 	.word	0x20000bdc

08003fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <xTaskGetSchedulerState+0x34>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	e008      	b.n	8003fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <xTaskGetSchedulerState+0x38>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	e001      	b.n	8003fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fe2:	687b      	ldr	r3, [r7, #4]
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000bc8 	.word	0x20000bc8
 8003ff4:	20000be4 	.word	0x20000be4

08003ff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d05a      	beq.n	80040c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <xTaskPriorityDisinherit+0xd8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d00c      	beq.n	8004032 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	b672      	cpsid	i
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	b662      	cpsie	i
 800402c:	60fb      	str	r3, [r7, #12]
}
 800402e:	bf00      	nop
 8004030:	e7fe      	b.n	8004030 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	b672      	cpsid	i
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	b662      	cpsie	i
 800404e:	60bb      	str	r3, [r7, #8]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	429a      	cmp	r2, r3
 8004068:	d02c      	beq.n	80040c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d128      	bne.n	80040c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3304      	adds	r3, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fc64 	bl	8002944 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <xTaskPriorityDisinherit+0xdc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <xTaskPriorityDisinherit+0xac>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <xTaskPriorityDisinherit+0xdc>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <xTaskPriorityDisinherit+0xe0>)
 80040b2:	441a      	add	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe fbe5 	bl	800288a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040c4:	697b      	ldr	r3, [r7, #20]
	}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200006e8 	.word	0x200006e8
 80040d4:	20000bc4 	.word	0x20000bc4
 80040d8:	200006ec 	.word	0x200006ec

080040dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <prvAddCurrentTaskToDelayedList+0x90>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ec:	4b20      	ldr	r3, [pc, #128]	; (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fc26 	bl	8002944 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d10a      	bne.n	8004116 <prvAddCurrentTaskToDelayedList+0x3a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4819      	ldr	r0, [pc, #100]	; (8004174 <prvAddCurrentTaskToDelayedList+0x98>)
 8004110:	f7fe fbbb 	bl	800288a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004114:	e026      	b.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	429a      	cmp	r2, r3
 800412c:	d209      	bcs.n	8004142 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe fbc9 	bl	80028d2 <vListInsert>
}
 8004140:	e010      	b.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvAddCurrentTaskToDelayedList+0x94>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f7fe fbbf 	bl	80028d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d202      	bcs.n	8004164 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000bc0 	.word	0x20000bc0
 8004170:	200006e8 	.word	0x200006e8
 8004174:	20000ba8 	.word	0x20000ba8
 8004178:	20000b78 	.word	0x20000b78
 800417c:	20000b74 	.word	0x20000b74
 8004180:	20000bdc 	.word	0x20000bdc

08004184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800418e:	f000 fb15 	bl	80047bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <xTimerCreateTimerTask+0x84>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d021      	beq.n	80041de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041a2:	1d3a      	adds	r2, r7, #4
 80041a4:	f107 0108 	add.w	r1, r7, #8
 80041a8:	f107 030c 	add.w	r3, r7, #12
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fb25 	bl	80027fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	9202      	str	r2, [sp, #8]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2302      	movs	r3, #2
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	460a      	mov	r2, r1
 80041c4:	4911      	ldr	r1, [pc, #68]	; (800420c <xTimerCreateTimerTask+0x88>)
 80041c6:	4812      	ldr	r0, [pc, #72]	; (8004210 <xTimerCreateTimerTask+0x8c>)
 80041c8:	f7ff f8f0 	bl	80033ac <xTaskCreateStatic>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <xTimerCreateTimerTask+0x90>)
 80041d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <xTimerCreateTimerTask+0x90>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	613b      	str	r3, [r7, #16]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000c18 	.word	0x20000c18
 800420c:	08005128 	.word	0x08005128
 8004210:	08004355 	.word	0x08004355
 8004214:	20000c1c 	.word	0x20000c1c

08004218 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10c      	bne.n	800424a <xTimerGenericCommand+0x32>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	b672      	cpsid	i
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	b662      	cpsie	i
 8004244:	623b      	str	r3, [r7, #32]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <xTimerGenericCommand+0x9c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d02a      	beq.n	80042a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	dc18      	bgt.n	8004296 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004264:	f7ff feaa 	bl	8003fbc <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b02      	cmp	r3, #2
 800426c:	d109      	bne.n	8004282 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <xTimerGenericCommand+0x9c>)
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f107 0110 	add.w	r1, r7, #16
 8004276:	2300      	movs	r3, #0
 8004278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427a:	f7fe fc9d 	bl	8002bb8 <xQueueGenericSend>
 800427e:	6278      	str	r0, [r7, #36]	; 0x24
 8004280:	e012      	b.n	80042a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <xTimerGenericCommand+0x9c>)
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	f107 0110 	add.w	r1, r7, #16
 800428a:	2300      	movs	r3, #0
 800428c:	2200      	movs	r2, #0
 800428e:	f7fe fc93 	bl	8002bb8 <xQueueGenericSend>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24
 8004294:	e008      	b.n	80042a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <xTimerGenericCommand+0x9c>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f107 0110 	add.w	r1, r7, #16
 800429e:	2300      	movs	r3, #0
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	f7fe fd8f 	bl	8002dc4 <xQueueGenericSendFromISR>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3728      	adds	r7, #40	; 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000c18 	.word	0x20000c18

080042b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <prvProcessExpiredTimer+0x98>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fb37 	bl	8002944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d024      	beq.n	800432e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	18d1      	adds	r1, r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f000 f8d3 	bl	800449c <prvInsertTimerInActiveList>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d021      	beq.n	8004340 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	2100      	movs	r1, #0
 8004306:	6978      	ldr	r0, [r7, #20]
 8004308:	f7ff ff86 	bl	8004218 <xTimerGenericCommand>
 800430c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d115      	bne.n	8004340 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	b672      	cpsid	i
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	b662      	cpsie	i
 8004328:	60fb      	str	r3, [r7, #12]
}
 800432a:	bf00      	nop
 800432c:	e7fe      	b.n	800432c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	6978      	ldr	r0, [r7, #20]
 8004346:	4798      	blx	r3
}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000c10 	.word	0x20000c10

08004354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f857 	bl	8004414 <prvGetNextExpireTime>
 8004366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4619      	mov	r1, r3
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f803 	bl	8004378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004372:	f000 f8d5 	bl	8004520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004376:	e7f1      	b.n	800435c <prvTimerTask+0x8>

08004378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004382:	f7ff fa27 	bl	80037d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004386:	f107 0308 	add.w	r3, r7, #8
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f866 	bl	800445c <prvSampleTimeNow>
 8004390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d130      	bne.n	80043fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <prvProcessTimerOrBlockTask+0x3c>
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d806      	bhi.n	80043b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043a6:	f7ff fa23 	bl	80037f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff83 	bl	80042b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043b2:	e024      	b.n	80043fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <prvProcessTimerOrBlockTask+0x90>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <prvProcessTimerOrBlockTask+0x50>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <prvProcessTimerOrBlockTask+0x52>
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <prvProcessTimerOrBlockTask+0x94>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	f7fe ffb3 	bl	8003344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043de:	f7ff fa07 	bl	80037f0 <xTaskResumeAll>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <prvProcessTimerOrBlockTask+0x98>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
}
 80043f8:	e001      	b.n	80043fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043fa:	f7ff f9f9 	bl	80037f0 <xTaskResumeAll>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000c14 	.word	0x20000c14
 800440c:	20000c18 	.word	0x20000c18
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <prvGetNextExpireTime+0x44>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <prvGetNextExpireTime+0x16>
 8004426:	2201      	movs	r2, #1
 8004428:	e000      	b.n	800442c <prvGetNextExpireTime+0x18>
 800442a:	2200      	movs	r2, #0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <prvGetNextExpireTime+0x44>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e001      	b.n	8004448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000c10 	.word	0x20000c10

0800445c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004464:	f7ff fa64 	bl	8003930 <xTaskGetTickCount>
 8004468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <prvSampleTimeNow+0x3c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d205      	bcs.n	8004480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004474:	f000 f93c 	bl	80046f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e002      	b.n	8004486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <prvSampleTimeNow+0x3c>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000c20 	.word	0x20000c20

0800449c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d812      	bhi.n	80044e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e01b      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <prvInsertTimerInActiveList+0x7c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe f9f6 	bl	80028d2 <vListInsert>
 80044e6:	e012      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d206      	bcs.n	80044fe <prvInsertTimerInActiveList+0x62>
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	e007      	b.n	800450e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <prvInsertTimerInActiveList+0x80>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fe f9e2 	bl	80028d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800450e:	697b      	ldr	r3, [r7, #20]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000c14 	.word	0x20000c14
 800451c:	20000c10 	.word	0x20000c10

08004520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	; 0x38
 8004524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004526:	e0d0      	b.n	80046ca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	da1a      	bge.n	8004564 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	3304      	adds	r3, #4
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	b672      	cpsid	i
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	b662      	cpsie	i
 800454e:	61fb      	str	r3, [r7, #28]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455a:	6850      	ldr	r0, [r2, #4]
 800455c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	4611      	mov	r1, r2
 8004562:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f2c0 80ae 	blt.w	80046c8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe f9e1 	bl	8002944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004582:	463b      	mov	r3, r7
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff69 	bl	800445c <prvSampleTimeNow>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b09      	cmp	r3, #9
 8004590:	f200 809b 	bhi.w	80046ca <prvProcessReceivedCommands+0x1aa>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <prvProcessReceivedCommands+0x7c>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045c5 	.word	0x080045c5
 80045a8:	0800463d 	.word	0x0800463d
 80045ac:	08004651 	.word	0x08004651
 80045b0:	0800469f 	.word	0x0800469f
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045c5 	.word	0x080045c5
 80045bc:	0800463d 	.word	0x0800463d
 80045c0:	08004651 	.word	0x08004651
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	18d1      	adds	r1, r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e4:	f7ff ff5a 	bl	800449c <prvInsertTimerInActiveList>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d06d      	beq.n	80046ca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d062      	beq.n	80046ca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	441a      	add	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	2100      	movs	r1, #0
 8004614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004616:	f7ff fdff 	bl	8004218 <xTimerGenericCommand>
 800461a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d153      	bne.n	80046ca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	b672      	cpsid	i
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	b662      	cpsie	i
 8004636:	61bb      	str	r3, [r7, #24]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800464e:	e03c      	b.n	80046ca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10c      	bne.n	800468a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	b672      	cpsid	i
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	b662      	cpsie	i
 8004684:	617b      	str	r3, [r7, #20]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	18d1      	adds	r1, r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004698:	f7ff ff00 	bl	800449c <prvInsertTimerInActiveList>
					break;
 800469c:	e015      	b.n	80046ca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f000 fbcb 	bl	8004e48 <vPortFree>
 80046b2:	e00a      	b.n	80046ca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046c6:	e000      	b.n	80046ca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <prvProcessReceivedCommands+0x1cc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1d39      	adds	r1, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fc16 	bl	8002f04 <xQueueReceive>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f af24 	bne.w	8004528 <prvProcessReceivedCommands+0x8>
	}
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	3730      	adds	r7, #48	; 0x30
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000c18 	.word	0x20000c18

080046f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046f6:	e04a      	b.n	800478e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3304      	adds	r3, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe f917 	bl	8002944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d030      	beq.n	800478e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	429a      	cmp	r2, r3
 800473c:	d90e      	bls.n	800475c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3304      	adds	r3, #4
 8004752:	4619      	mov	r1, r3
 8004754:	4610      	mov	r0, r2
 8004756:	f7fe f8bc 	bl	80028d2 <vListInsert>
 800475a:	e018      	b.n	800478e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	2100      	movs	r1, #0
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fd56 	bl	8004218 <xTimerGenericCommand>
 800476c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10c      	bne.n	800478e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	b672      	cpsid	i
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	b662      	cpsie	i
 8004788:	603b      	str	r3, [r7, #0]
}
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1af      	bne.n	80046f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <prvSwitchTimerLists+0xc8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <prvSwitchTimerLists+0xc4>)
 80047a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <prvSwitchTimerLists+0xc8>)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000c10 	.word	0x20000c10
 80047b8:	20000c14 	.word	0x20000c14

080047bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047c2:	f000 f94b 	bl	8004a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <prvCheckForValidListAndQueue+0x60>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d120      	bne.n	8004810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047ce:	4814      	ldr	r0, [pc, #80]	; (8004820 <prvCheckForValidListAndQueue+0x64>)
 80047d0:	f7fe f82e 	bl	8002830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047d4:	4813      	ldr	r0, [pc, #76]	; (8004824 <prvCheckForValidListAndQueue+0x68>)
 80047d6:	f7fe f82b 	bl	8002830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <prvCheckForValidListAndQueue+0x6c>)
 80047dc:	4a10      	ldr	r2, [pc, #64]	; (8004820 <prvCheckForValidListAndQueue+0x64>)
 80047de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047e0:	4b12      	ldr	r3, [pc, #72]	; (800482c <prvCheckForValidListAndQueue+0x70>)
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <prvCheckForValidListAndQueue+0x68>)
 80047e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047e6:	2300      	movs	r3, #0
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <prvCheckForValidListAndQueue+0x74>)
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <prvCheckForValidListAndQueue+0x78>)
 80047ee:	2110      	movs	r1, #16
 80047f0:	200a      	movs	r0, #10
 80047f2:	f7fe f93b 	bl	8002a6c <xQueueGenericCreateStatic>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4a08      	ldr	r2, [pc, #32]	; (800481c <prvCheckForValidListAndQueue+0x60>)
 80047fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <prvCheckForValidListAndQueue+0x60>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <prvCheckForValidListAndQueue+0x60>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	490b      	ldr	r1, [pc, #44]	; (8004838 <prvCheckForValidListAndQueue+0x7c>)
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fd70 	bl	80032f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004810:	f000 f958 	bl	8004ac4 <vPortExitCritical>
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000c18 	.word	0x20000c18
 8004820:	20000be8 	.word	0x20000be8
 8004824:	20000bfc 	.word	0x20000bfc
 8004828:	20000c10 	.word	0x20000c10
 800482c:	20000c14 	.word	0x20000c14
 8004830:	20000cc4 	.word	0x20000cc4
 8004834:	20000c24 	.word	0x20000c24
 8004838:	08005130 	.word	0x08005130

0800483c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3b04      	subs	r3, #4
 800484c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b04      	subs	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <pxPortInitialiseStack+0x64>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b14      	subs	r3, #20
 8004876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f06f 0202 	mvn.w	r2, #2
 800488a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b20      	subs	r3, #32
 8004890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	080048a5 	.word	0x080048a5

080048a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <prvTaskExitError+0x5c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d00c      	beq.n	80048d2 <prvTaskExitError+0x2e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	b672      	cpsid	i
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	b662      	cpsie	i
 80048cc:	60fb      	str	r3, [r7, #12]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <prvTaskExitError+0x2c>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	60bb      	str	r3, [r7, #8]
}
 80048e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048ea:	bf00      	nop
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0fc      	beq.n	80048ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	2000000c 	.word	0x2000000c
	...

08004910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <pxCurrentTCBConst2>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	6808      	ldr	r0, [r1, #0]
 8004916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	f380 8809 	msr	PSP, r0
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	4770      	bx	lr
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst2>:
 8004930:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004938:	4808      	ldr	r0, [pc, #32]	; (800495c <prvPortStartFirstTask+0x24>)
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f380 8808 	msr	MSP, r0
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8814 	msr	CONTROL, r0
 800494a:	b662      	cpsie	i
 800494c:	b661      	cpsie	f
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	df00      	svc	0
 8004958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800495a:	bf00      	nop
 800495c:	e000ed08 	.word	0xe000ed08

08004960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004966:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <xPortStartScheduler+0xe4>)
 8004968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	22ff      	movs	r2, #255	; 0xff
 8004976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <xPortStartScheduler+0xe8>)
 800498c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800498e:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <xPortStartScheduler+0xec>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004994:	e009      	b.n	80049aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <xPortStartScheduler+0xec>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3b01      	subs	r3, #1
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <xPortStartScheduler+0xec>)
 800499e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d0ef      	beq.n	8004996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <xPortStartScheduler+0xec>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f1c3 0307 	rsb	r3, r3, #7
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d00c      	beq.n	80049dc <xPortStartScheduler+0x7c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	b672      	cpsid	i
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	b662      	cpsie	i
 80049d6:	60bb      	str	r3, [r7, #8]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <xPortStartScheduler+0xec>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <xPortStartScheduler+0xec>)
 80049e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049e6:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <xPortStartScheduler+0xec>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <xPortStartScheduler+0xec>)
 80049f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <xPortStartScheduler+0xf0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <xPortStartScheduler+0xf0>)
 8004a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a12:	f000 f8dd 	bl	8004bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <xPortStartScheduler+0xf4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a1c:	f000 f8fc 	bl	8004c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <xPortStartScheduler+0xf8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <xPortStartScheduler+0xf8>)
 8004a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a2c:	f7ff ff84 	bl	8004938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a30:	f7ff f84a 	bl	8003ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8004a34:	f7ff ff36 	bl	80048a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e400 	.word	0xe000e400
 8004a48:	20000d14 	.word	0x20000d14
 8004a4c:	20000d18 	.word	0x20000d18
 8004a50:	e000ed20 	.word	0xe000ed20
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	e000ef34 	.word	0xe000ef34

08004a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	b672      	cpsid	i
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	b662      	cpsie	i
 8004a76:	607b      	str	r3, [r7, #4]
}
 8004a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <vPortEnterCritical+0x60>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <vPortEnterCritical+0x60>)
 8004a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <vPortEnterCritical+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d111      	bne.n	8004ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <vPortEnterCritical+0x64>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	b672      	cpsid	i
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	b662      	cpsie	i
 8004aaa:	603b      	str	r3, [r7, #0]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vPortEnterCritical+0x52>
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <vPortExitCritical+0x54>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <vPortExitCritical+0x28>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	b672      	cpsid	i
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	b662      	cpsie	i
 8004ae6:	607b      	str	r3, [r7, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <vPortExitCritical+0x54>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <vPortExitCritical+0x54>)
 8004af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <vPortExitCritical+0x54>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d105      	bne.n	8004b0a <vPortExitCritical+0x46>
 8004afe:	2300      	movs	r3, #0
 8004b00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f383 8811 	msr	BASEPRI, r3
}
 8004b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	00000000 	.word	0x00000000

08004b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b20:	f3ef 8009 	mrs	r0, PSP
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pxCurrentTCBConst>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f01e 0f10 	tst.w	lr, #16
 8004b30:	bf08      	it	eq
 8004b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b44:	b672      	cpsid	i
 8004b46:	f380 8811 	msr	BASEPRI, r0
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	b662      	cpsie	i
 8004b54:	f7fe ffb8 	bl	8003ac8 <vTaskSwitchContext>
 8004b58:	f04f 0000 	mov.w	r0, #0
 8004b5c:	f380 8811 	msr	BASEPRI, r0
 8004b60:	bc09      	pop	{r0, r3}
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f01e 0f10 	tst.w	lr, #16
 8004b6e:	bf08      	it	eq
 8004b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b74:	f380 8809 	msr	PSP, r0
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <pxCurrentTCBConst>:
 8004b80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	b672      	cpsid	i
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	b662      	cpsie	i
 8004ba2:	607b      	str	r3, [r7, #4]
}
 8004ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ba6:	f7fe fed3 	bl	8003950 <xTaskIncrementTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <xPortSysTickHandler+0x44>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f383 8811 	msr	BASEPRI, r3
}
 8004bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <vPortSetupTimerInterrupt+0x34>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <vPortSetupTimerInterrupt+0x38>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <vPortSetupTimerInterrupt+0x3c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <vPortSetupTimerInterrupt+0x40>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <vPortSetupTimerInterrupt+0x44>)
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bf2:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <vPortSetupTimerInterrupt+0x34>)
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	601a      	str	r2, [r3, #0]
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e010 	.word	0xe000e010
 8004c08:	e000e018 	.word	0xe000e018
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	10624dd3 	.word	0x10624dd3
 8004c14:	e000e014 	.word	0xe000e014

08004c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c28 <vPortEnableVFP+0x10>
 8004c1c:	6801      	ldr	r1, [r0, #0]
 8004c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c22:	6001      	str	r1, [r0, #0]
 8004c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c26:	bf00      	nop
 8004c28:	e000ed88 	.word	0xe000ed88

08004c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c32:	f3ef 8305 	mrs	r3, IPSR
 8004c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d916      	bls.n	8004c6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c3e:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <vPortValidateInterruptPriority+0x78>)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c48:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <vPortValidateInterruptPriority+0x7c>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	7afa      	ldrb	r2, [r7, #11]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d20c      	bcs.n	8004c6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	b672      	cpsid	i
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	b662      	cpsie	i
 8004c66:	607b      	str	r3, [r7, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortValidateInterruptPriority+0x80>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <vPortValidateInterruptPriority+0x84>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d90c      	bls.n	8004c96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	603b      	str	r3, [r7, #0]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <vPortValidateInterruptPriority+0x68>
	}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	e000e3f0 	.word	0xe000e3f0
 8004ca8:	20000d14 	.word	0x20000d14
 8004cac:	e000ed0c 	.word	0xe000ed0c
 8004cb0:	20000d18 	.word	0x20000d18

08004cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cc0:	f7fe fd88 	bl	80037d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cc4:	4b5b      	ldr	r3, [pc, #364]	; (8004e34 <pvPortMalloc+0x180>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ccc:	f000 f91a 	bl	8004f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cd0:	4b59      	ldr	r3, [pc, #356]	; (8004e38 <pvPortMalloc+0x184>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 8092 	bne.w	8004e02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01f      	beq.n	8004d24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4413      	add	r3, r2
 8004cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <pvPortMalloc+0x70>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	b672      	cpsid	i
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	b662      	cpsie	i
 8004d1e:	617b      	str	r3, [r7, #20]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d06b      	beq.n	8004e02 <pvPortMalloc+0x14e>
 8004d2a:	4b44      	ldr	r3, [pc, #272]	; (8004e3c <pvPortMalloc+0x188>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d866      	bhi.n	8004e02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d34:	4b42      	ldr	r3, [pc, #264]	; (8004e40 <pvPortMalloc+0x18c>)
 8004d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <pvPortMalloc+0x18c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3e:	e004      	b.n	8004d4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d903      	bls.n	8004d5c <pvPortMalloc+0xa8>
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f1      	bne.n	8004d40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d5c:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <pvPortMalloc+0x180>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d04d      	beq.n	8004e02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	2308      	movs	r3, #8
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d921      	bls.n	8004dcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <pvPortMalloc+0x100>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	b672      	cpsid	i
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	b662      	cpsie	i
 8004dae:	613b      	str	r3, [r7, #16]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad2      	subs	r2, r2, r3
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004dc6:	69b8      	ldr	r0, [r7, #24]
 8004dc8:	f000 f8fe 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <pvPortMalloc+0x188>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <pvPortMalloc+0x188>)
 8004dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <pvPortMalloc+0x188>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <pvPortMalloc+0x190>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d203      	bcs.n	8004dee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <pvPortMalloc+0x188>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a16      	ldr	r2, [pc, #88]	; (8004e44 <pvPortMalloc+0x190>)
 8004dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <pvPortMalloc+0x184>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e02:	f7fe fcf5 	bl	80037f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <pvPortMalloc+0x176>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <pvPortMalloc+0x174>
	return pvReturn;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20004924 	.word	0x20004924
 8004e38:	20004930 	.word	0x20004930
 8004e3c:	20004928 	.word	0x20004928
 8004e40:	2000491c 	.word	0x2000491c
 8004e44:	2000492c 	.word	0x2000492c

08004e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d04c      	beq.n	8004ef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	425b      	negs	r3, r3
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4413      	add	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <vPortFree+0xb4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <vPortFree+0x48>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	b672      	cpsid	i
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	b662      	cpsie	i
 8004e8a:	60fb      	str	r3, [r7, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00c      	beq.n	8004eb2 <vPortFree+0x6a>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	b672      	cpsid	i
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	b662      	cpsie	i
 8004eac:	60bb      	str	r3, [r7, #8]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	4b11      	ldr	r3, [pc, #68]	; (8004efc <vPortFree+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d019      	beq.n	8004ef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d115      	bne.n	8004ef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <vPortFree+0xb4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ed8:	f7fe fc7c 	bl	80037d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vPortFree+0xb8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vPortFree+0xb8>)
 8004ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eea:	6938      	ldr	r0, [r7, #16]
 8004eec:	f000 f86c 	bl	8004fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ef0:	f7fe fc7e 	bl	80037f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20004930 	.word	0x20004930
 8004f00:	20004928 	.word	0x20004928

08004f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <prvHeapInit+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3307      	adds	r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <prvHeapInit+0xac>)
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f50:	2208      	movs	r2, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <prvHeapInit+0xb8>)
 8004f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvHeapInit+0xbc>)
 8004f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <prvHeapInit+0xc0>)
 8004f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000d1c 	.word	0x20000d1c
 8004fb4:	2000491c 	.word	0x2000491c
 8004fb8:	20004924 	.word	0x20004924
 8004fbc:	2000492c 	.word	0x2000492c
 8004fc0:	20004928 	.word	0x20004928
 8004fc4:	20004930 	.word	0x20004930

08004fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <prvInsertBlockIntoFreeList+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e002      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x14>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d8f7      	bhi.n	8004fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d108      	bne.n	800500a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d118      	bne.n	8005050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d00d      	beq.n	8005046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d002      	beq.n	8005066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000491c 	.word	0x2000491c
 8005078:	20004924 	.word	0x20004924

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4d0d      	ldr	r5, [pc, #52]	; (80050b4 <__libc_init_array+0x38>)
 8005080:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	2600      	movs	r6, #0
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	4d0b      	ldr	r5, [pc, #44]	; (80050bc <__libc_init_array+0x40>)
 800508e:	4c0c      	ldr	r4, [pc, #48]	; (80050c0 <__libc_init_array+0x44>)
 8005090:	f000 f82e 	bl	80050f0 <_init>
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	2600      	movs	r6, #0
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	08005198 	.word	0x08005198
 80050b8:	08005198 	.word	0x08005198
 80050bc:	08005198 	.word	0x08005198
 80050c0:	0800519c 	.word	0x0800519c

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050da:	4291      	cmp	r1, r2
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <memset>:
 80050e0:	4402      	add	r2, r0
 80050e2:	4603      	mov	r3, r0
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d100      	bne.n	80050ea <memset+0xa>
 80050e8:	4770      	bx	lr
 80050ea:	f803 1b01 	strb.w	r1, [r3], #1
 80050ee:	e7f9      	b.n	80050e4 <memset+0x4>

080050f0 <_init>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr

080050fc <_fini>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr
